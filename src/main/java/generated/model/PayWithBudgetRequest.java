package generated.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;





@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2016-08-07T00:15:22.653+03:00")
public class PayWithBudgetRequest   {
  
  private List<Customer> customers = new ArrayList<Customer>();
  private String verificationCode = null;
  private Integer totalSum = null;
  private Boolean allowPartialPayment = null;
  private String posID = null;
  private String branchID = null;
  private String transactionID = null;
  private Date timeStamp = null;
  private String cashier = null;

  /**
   **/
  public PayWithBudgetRequest customers(List<Customer> customers) {
    this.customers = customers;
    return this;
  }

  
  @ApiModelProperty(value = "")
  @JsonProperty("Customers")
  public List<Customer> getCustomers() {
    return customers;
  }
  public void setCustomers(List<Customer> customers) {
    this.customers = customers;
  }

  /**
   * A verification code provided by the club member (generated by club app, sent by SMS, etc.)
   **/
  public PayWithBudgetRequest verificationCode(String verificationCode) {
    this.verificationCode = verificationCode;
    return this;
  }

  
  @ApiModelProperty(value = "A verification code provided by the club member (generated by club app, sent by SMS, etc.)")
  @JsonProperty("VerificationCode")
  public String getVerificationCode() {
    return verificationCode;
  }
  public void setVerificationCode(String verificationCode) {
    this.verificationCode = verificationCode;
  }

  /**
   * The requested amount to pay in cents. Can be negative to reimburse customer.
   **/
  public PayWithBudgetRequest totalSum(Integer totalSum) {
    this.totalSum = totalSum;
    return this;
  }

  
  @ApiModelProperty(required = true, value = "The requested amount to pay in cents. Can be negative to reimburse customer.")
  @JsonProperty("TotalSum")
  public Integer getTotalSum() {
    return totalSum;
  }
  public void setTotalSum(Integer totalSum) {
    this.totalSum = totalSum;
  }

  /**
   * In case the member budget is insufficient, should a partial payment be allowed.
   **/
  public PayWithBudgetRequest allowPartialPayment(Boolean allowPartialPayment) {
    this.allowPartialPayment = allowPartialPayment;
    return this;
  }

  
  @ApiModelProperty(value = "In case the member budget is insufficient, should a partial payment be allowed.")
  @JsonProperty("AllowPartialPayment")
  public Boolean getAllowPartialPayment() {
    return allowPartialPayment;
  }
  public void setAllowPartialPayment(Boolean allowPartialPayment) {
    this.allowPartialPayment = allowPartialPayment;
  }

  /**
   * Transmitting POS identifier in the branch.
   **/
  public PayWithBudgetRequest posID(String posID) {
    this.posID = posID;
    return this;
  }

  
  @ApiModelProperty(value = "Transmitting POS identifier in the branch.")
  @JsonProperty("PosID")
  public String getPosID() {
    return posID;
  }
  public void setPosID(String posID) {
    this.posID = posID;
  }

  /**
   * Transmitting branch identifier.
   **/
  public PayWithBudgetRequest branchID(String branchID) {
    this.branchID = branchID;
    return this;
  }

  
  @ApiModelProperty(required = true, value = "Transmitting branch identifier.")
  @JsonProperty("BranchID")
  public String getBranchID() {
    return branchID;
  }
  public void setBranchID(String branchID) {
    this.branchID = branchID;
  }

  /**
   * Transaction id from the POS.
   **/
  public PayWithBudgetRequest transactionID(String transactionID) {
    this.transactionID = transactionID;
    return this;
  }

  
  @ApiModelProperty(required = true, value = "Transaction id from the POS.")
  @JsonProperty("TransactionID")
  public String getTransactionID() {
    return transactionID;
  }
  public void setTransactionID(String transactionID) {
    this.transactionID = transactionID;
  }

  /**
   * Transaction time or time of purchase.
   **/
  public PayWithBudgetRequest timeStamp(Date timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  
  @ApiModelProperty(required = true, value = "Transaction time or time of purchase.")
  @JsonProperty("TimeStamp")
  public Date getTimeStamp() {
    return timeStamp;
  }
  public void setTimeStamp(Date timeStamp) {
    this.timeStamp = timeStamp;
  }

  /**
   * Information about the current transaction operator.
   **/
  public PayWithBudgetRequest cashier(String cashier) {
    this.cashier = cashier;
    return this;
  }

  
  @ApiModelProperty(value = "Information about the current transaction operator.")
  @JsonProperty("Cashier")
  public String getCashier() {
    return cashier;
  }
  public void setCashier(String cashier) {
    this.cashier = cashier;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayWithBudgetRequest payWithBudgetRequest = (PayWithBudgetRequest) o;
    return Objects.equals(customers, payWithBudgetRequest.customers) &&
        Objects.equals(verificationCode, payWithBudgetRequest.verificationCode) &&
        Objects.equals(totalSum, payWithBudgetRequest.totalSum) &&
        Objects.equals(allowPartialPayment, payWithBudgetRequest.allowPartialPayment) &&
        Objects.equals(posID, payWithBudgetRequest.posID) &&
        Objects.equals(branchID, payWithBudgetRequest.branchID) &&
        Objects.equals(transactionID, payWithBudgetRequest.transactionID) &&
        Objects.equals(timeStamp, payWithBudgetRequest.timeStamp) &&
        Objects.equals(cashier, payWithBudgetRequest.cashier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customers, verificationCode, totalSum, allowPartialPayment, posID, branchID, transactionID, timeStamp, cashier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayWithBudgetRequest {\n");
    
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    verificationCode: ").append(toIndentedString(verificationCode)).append("\n");
    sb.append("    totalSum: ").append(toIndentedString(totalSum)).append("\n");
    sb.append("    allowPartialPayment: ").append(toIndentedString(allowPartialPayment)).append("\n");
    sb.append("    posID: ").append(toIndentedString(posID)).append("\n");
    sb.append("    branchID: ").append(toIndentedString(branchID)).append("\n");
    sb.append("    transactionID: ").append(toIndentedString(transactionID)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    cashier: ").append(toIndentedString(cashier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

